"use strict";
exports.__esModule = true;
var KeyCombination = /** @class */ (function () {
    function KeyCombination(source) {
        this.alt = false;
        this.shift = false;
        this.ctrl = false;
        this.meta = false;
        var MODIFIERS = ['alt', 'shift', 'ctrl', 'meta'];
        var keys = source.split('+');
        for (var _i = 0, MODIFIERS_1 = MODIFIERS; _i < MODIFIERS_1.length; _i++) {
            var m = MODIFIERS_1[_i];
            var i = keys.indexOf(m);
            if (i >= 0) {
                this[m] = true;
                keys.splice(i, 1);
            }
        }
        if (keys.length != 1)
            throw new Error("invalid keybind source: " + source);
        var key = keys[0];
        this.key = PhysicalKey.fromString(key);
    }
    KeyCombination.prototype.match = function (e) {
        return (e.altKey == this.alt &&
            e.shiftKey == this.shift &&
            e.ctrlKey == this.ctrl &&
            e.metaKey == this.meta &&
            this.key.equals(PhysicalKey.fromEvent(e)));
    };
    KeyCombination.prototype.html = function () {
        return [
            this.alt ? '&#x2325;' : '',
            this.shift ? '&#x21e7;' : '',
            this.ctrl ? '&#x2303;' : '',
            this.meta ? '&#x2318;' : '',
            this.key.toHTML()
        ].join('');
    };
    return KeyCombination;
}());
var PhysicalKey = /** @class */ (function () {
    function PhysicalKey(keyCode) {
        this.keyCode = keyCode;
    }
    PhysicalKey.fromEvent = function (e) {
        return new PhysicalKey(e.keyCode);
    };
    PhysicalKey.fromString = function (s) {
        if (s.length == 1) {
            return new PhysicalKey(s.toUpperCase().charCodeAt(0));
        }
        else {
            var code = name2code[s];
            if (code == undefined)
                throw new Error("unknwon key name: " + s);
            else
                return new PhysicalKey(code);
        }
    };
    PhysicalKey.prototype.equals = function (o) {
        return this.keyCode == o.keyCode;
    };
    PhysicalKey.prototype.toHTML = function () {
        var name = code2name[this.keyCode];
        var html = name2html[name];
        return html || name || String.fromCharCode(this.keyCode);
    };
    return PhysicalKey;
}());
var Keybind = /** @class */ (function () {
    function Keybind(kc, handler) {
        this.kc = kc;
        this.handler = handler;
    }
    return Keybind;
}());
var keybinds = [];
document.addEventListener('keydown', function (e) {
    if (e.target != document.body)
        return;
    for (var _i = 0, keybinds_1 = keybinds; _i < keybinds_1.length; _i++) {
        var kb = keybinds_1[_i];
        if (kb.kc.match(e)) {
            e.preventDefault();
            kb.handler(e);
        }
    }
});
function on(source, handler) {
    var kb = new Keybind(new KeyCombination(source), handler);
    keybinds.push(kb);
    return function () {
        var i = keybinds.indexOf(kb);
        console.assert(i >= 0, "keybind " + source + " is not registered");
        keybinds.splice(i, 1);
    };
}
exports.on = on;
function html(source) {
    return (new KeyCombination(source)).html();
}
exports.html = html;
var name2code = {
    Backspace: 8,
    Tab: 9,
    Enter: 13,
    Shift: 16,
    Ctrl: 17,
    Escape: 27,
    Space: 32,
    Delete: 46,
    Left: 37,
    Up: 38,
    Right: 39,
    Down: 40,
    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123
};
var name2html = {
    Tab: '\u21E5',
    Enter: '\u23CE',
    Escape: '\u238B'
};
var code2name = (function () {
    var d = {};
    for (var name_1 in name2code) {
        d[name2code[name_1]] = name_1;
    }
    return d;
})();
